{"version":3,"sources":["pages/Discover.js","utils/auth.js","utils/localStorage.js","utils/queries.js","utils/mutations.js","pages/LikedPost.js","components/SignupForm.js","components/LoginForm.js","components/NavBar.js","components/Footer/index.js","components/Header/index.js","App.js","index.js"],"names":["Discover","myImage","Cloudinary","cloud","cloudName","image","resize","fill","width","height","format","Container","Card","Body","cldImg","authService","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removePostId","postId","savedPostIds","JSON","parse","updatedsavedPostIds","filter","savedPostId","stringify","GET_ME","gql","LOGIN_USER","ADD_USER","REMOVE_POST","LikedPost","useQuery","loading","data","useMutation","removePost","userData","error","me","handleDeletePost","Auth","loggedIn","variables","console","fluid","className","length","class","map","post","border","Img","src","alt","title","variant","Title","authors","Text","description","Button","onClick","SignupForm","useState","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","useEffect","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","currentTarget","checkValidity","stopPropagation","login","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","disabled","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","fixed","shadow","icon","Brand","as","Link","to","Toggle","Collapse","id","Nav","logout","Modal","size","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","Footer","useLocation","navigate","useNavigate","pathname","href","NavBar","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","element","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.24cca312.chunk.js","sourcesContent":["\n// 1. Import classes\n// ==================\nimport React from 'react'\nimport {AdvancedImage} from '@cloudinary/react';\nimport {Cloudinary} from \"@cloudinary/url-gen\";\n// Import any actions required for transformations.\nimport {fill} from \"@cloudinary/url-gen/actions/resize\";\nimport { Container, Card } from 'react-bootstrap';\n\nconst Discover = () => {\n  // 2. Set your cloud name\n  //========================\n  // Create a Cloudinary instance and set your cloud name.\n    const cld = new Cloudinary({\n        cloud: {\n        cloudName: 'drxesxzoi'\n        }\n    });\n    // 3. Get your image\n    //===================\n    // Instantiate a CloudinaryImage object for the image with the public ID, 'docs/models'.\n    const myImage = cld.image('images/frog1'); \n    // 4. Transform your image\n    //=========================\n    // Resize to 250 x 250 pixels using the 'fill' crop mode.\n    myImage.resize(fill().width(250).height(250)).format('png');\n    // 5. Deliver your image\n    // =========================\n    // Render the image in a React component.\n    return (\n        <Container>\n            <h1>This is the discover page</h1>\n            <Card>\n                <Card Body>\n                    <AdvancedImage cldImg={myImage} />\n                </Card>\n            </Card>\n        </Container>\n    )\n\n};\n\nexport default Discover;","// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n    // get user data\n    getProfile() {\n        return decode(this.getToken());\n    }\n\n    // check if user's logged in\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken();\n        return !!token && !this.isTokenExpired(token); // handwaiving here\n    }\n\n    // check if token is expired\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000) {\n                return true;\n            } else return false;\n        } catch (err) {\n            return false;\n        }\n    }\n\n    getToken() {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem('id_token');\n    }\n\n    login(idToken) {\n        // Saves user token to localStorage\n        localStorage.setItem('id_token', idToken);\n        window.location.assign('/');\n    }\n\n    logout() {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('id_token');\n        // this will reload the page and reset the state of the application\n        window.location.assign('/');\n    }\n}\nconst authService = new AuthService();\n\nexport default authService;\n","export const getSavedPostIds = () => {\n    const savedPostIds = localStorage.getItem('saved_posts')\n        ? JSON.parse(localStorage.getItem('saved_posts'))\n        : [];\n\n    return savedPostIds;\n};\n\nexport const savePostIds = (postIdArr) => {\n    if (postIdArr.length) {\n        localStorage.setItem('saved_posts', JSON.stringify(postIdArr));\n    } else {\n        localStorage.removeItem('saved_posts');\n    }\n};\n\nexport const removePostId = (postId) => {\n    const savedPostIds = localStorage.getItem('saved_posts')\n        ? JSON.parse(localStorage.getItem('saved_posts'))\n        : null;\n\n    if (!savedPostIds) {\n        return false;\n    }\n\n    const updatedsavedPostIds = savedPostIds?.filter((savedPostId) => savedPostId !== postId);\n    localStorage.setItem('saved_posts', JSON.stringify(updatedsavedPostIds));\n\n    return true;\n};","// This will hold the query GET_ME, which will execute the me query set up using Apollo Server.\n\nimport { gql } from '@apollo/client';\n\n// expand query to include all keys returned on object\nexport const GET_ME = gql`\n  query me {\n    me {\n      _id\n      username\n      email\n      likedPost {\n        postId\n        authors\n        description\n        title\n        image\n        link\n      }\n    }\n  }\n`;","import { gql } from \"@apollo/client\";\n\n// LOGIN_USER will execute the loginUser mutation set up using Apollo Server.\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n// ADD_USER will execute the addUser mutation.\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n        likedPost {\n          authors\n          bookId\n          image\n          link\n          title\n          description\n        }\n      }\n    }\n  }\n`;\n\n// LIKED_POST will execute the likePost mutation.\nexport const LIKED_POST = gql`\n  mutation likedPost($likedPost: PostData!) {\n    likedPost(likedPost: $likedPost) {\n      _id\n      username\n      likedPost {\n        postId\n        authors\n        description\n        title\n        image\n        link\n      }\n    }\n  }\n`;\n\n// ADD_POST will execute the addPost mutation.\nexport const ADD_POST = gql`\n  mutation addPost($postId: ID!) {\n    addPost(postId: $postId) {\n      _id\n      username\n      addPost {\n        postId\n        authors\n        description\n        title\n        image\n        link\n      }\n    }\n  }\n`;\n\n// REMOVE_POST will execute the removePost mutation.\nexport const REMOVE_POST = gql`\n  mutation removePost($postId: ID!) {\n    removePost(postId: $postId) {\n      _id\n      username\n      likedPost {\n        postId\n        authors\n        description\n        title\n        image\n        link\n      }\n    }\n  }\n`;\n\n","import React from \"react\";\nimport {\n    Container,\n    Card,\n    Button,\n} from \"react-bootstrap\";\nimport Auth from \"../utils/auth\";\nimport { removePostId } from \"../utils/localStorage\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { GET_ME } from \"../utils/queries\";\nimport { REMOVE_POST } from \"../utils/mutations\";\n\nconst LikedPost = () => {\n    const { loading, data } = useQuery(GET_ME);\n    const [removePost, { error }] = useMutation(REMOVE_POST);\n    const userData = data?.me || {};\n\n    // create function that accepts the post's mongo _id value as param and deletes the post from the database\n    const handleDeletePost = async (postId) => {\n        const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n        if (!token) {\n            return false;\n        }\n\n        try {\n            const { data } = await removePost({\n                variables: { postId },\n            });\n\n            removePostId(postId);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    if (loading) {\n        return <h2>LOADING...</h2>;\n    }\n\n    return (\n        <>\n            <div fluid className=\"text-light bg-dark\">\n                <Container>\n                    <h1>Viewing saved posts!</h1>\n                </Container>\n            </div>\n            <Container>\n                <h2>\n                    {userData.LikedPost.length\n                        ? `Viewing ${userData.LikedPost.length} saved ${userData.LikedPost.length === 1 ? \"post\" : \"posts\"\n                        }:`\n                        : \"You have no liked posts!\"}\n                </h2>\n                <div class=\"grid\">\n                    {userData.LikedPost.map((post) => {\n                        return (\n                            <Card key={post.postId} border=\"dark\">\n                                {post.image ? (\n                                    <Card.Img\n                                        src={post.image}\n                                        alt={`The cover for ${post.title}`}\n                                        variant=\"top\"\n                                    />\n                                ) : null}\n                                <Card.Body>\n                                    <Card.Title>{post.title}</Card.Title>\n                                    <p className=\"small\">Authors: {post.authors}</p>\n                                    <Card.Text>{post.description}</Card.Text>\n                                    <Button\n                                        className=\"btn-block btn-danger\"\n                                        onClick={() => handleDeletePost(post.postId)}\n                                    >\n                                        Delete this post!\n                                    </Button>\n                                </Card.Body>\n                            </Card>\n                        );\n                    })}\n                </div>\n            </Container>\n        </>\n    );\n};\n\nexport default LikedPost;\n","import React, { useState, useEffect } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\n// Replace the createUser() functionality imported from the API file with the ADD_USER mutation functionality.\n\nconst SignupForm = () => {\n    // set initial form state\n    const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n    // set state for form validation\n    const [validated] = useState(false);\n    // set state for alert\n    const [showAlert, setShowAlert] = useState(false);\n\n    const [addUser, { error }] = useMutation(ADD_USER);\n\n    useEffect(() => {\n        if (error) {\n            setShowAlert(true);\n        } else {\n            setShowAlert(false);\n        }\n    }, [error]);\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setUserFormData({ ...userFormData, [name]: value });\n    };\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        // check if form has everything (as per react-bootstrap docs)\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        try {\n            const { data } = await addUser({\n                variables: { ...userFormData },\n            });\n\n            // same as loginform, login with adduser, grab values from mutation\n            Auth.login(data.addUser.token);\n        } catch (err) {\n            console.error(err);\n        }\n\n        setUserFormData({\n            username: '',\n            email: '',\n            password: '',\n        });\n    };\n\n    return (\n        <>\n            {/* This is needed for the validation functionality above */}\n            <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n                {/* show alert if server response is bad */}\n                <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n                    Something went wrong with your signup!\n                </Alert>\n\n                <Form.Group>\n                    <Form.Label htmlFor='username'>Username</Form.Label>\n                    <Form.Control\n                        type='text'\n                        placeholder='Your username'\n                        name='username'\n                        onChange={handleInputChange}\n                        value={userFormData.username}\n                        required\n                    />\n                    <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor='email'>Email</Form.Label>\n                    <Form.Control\n                        type='email'\n                        placeholder='Your email address'\n                        name='email'\n                        onChange={handleInputChange}\n                        value={userFormData.email}\n                        required\n                    />\n                    <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor='password'>Password</Form.Label>\n                    <Form.Control\n                        type='password'\n                        placeholder='Your password'\n                        name='password'\n                        onChange={handleInputChange}\n                        value={userFormData.password}\n                        required\n                    />\n                    <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n                </Form.Group>\n                <Button\n                    disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n                    type='submit'\n                    variant='success'>\n                    Submit\n                </Button>\n            </Form>\n        </>\n    );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState, useEffect } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport { LOGIN_USER } from \"../utils/mutations\";\nimport { useMutation } from \"@apollo/client\";\n// import { loginUser } from '../utils/API';\nimport Auth from \"../utils/auth\";\n\nconst LoginForm = () => {\n    const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\n    const [validated] = useState(false);\n    const [showAlert, setShowAlert] = useState(false);\n    // Replace the loginUser() functionality imported from the API file with the LOGIN_USER mutation functionality.\n    const [login, { error }] = useMutation(LOGIN_USER);\n\n    useEffect(() => {\n        if (error) {\n            setShowAlert(true);\n        } else {\n            setShowAlert(false);\n        }\n    }, [error]);\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setUserFormData({ ...userFormData, [name]: value });\n    };\n\n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n\n        // check if form has everything (as per react-bootstrap docs)\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        try {\n            // Replace the login() functionality imported from the API file with the LOGIN_USER mutation functionality.\n            const { data } = await login({\n                variables: { ...userFormData },\n            });\n            // grab keys from mutation\n            Auth.login(data.login.token);\n        } catch (err) {\n            console.error(err);\n        }\n        // reset login form fields\n        setUserFormData({\n            email: \"\",\n            password: \"\",\n        });\n    };\n\n    return (\n        <>\n            <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n                <Alert\n                    dismissible\n                    onClose={() => setShowAlert(false)}\n                    show={showAlert}\n                    variant=\"danger\"\n                >\n                    Something went wrong with your login credentials!\n                </Alert>\n                <Form.Group>\n                    <Form.Label htmlFor=\"email\">Email</Form.Label>\n                    <Form.Control\n                        type=\"text\"\n                        placeholder=\"Your email\"\n                        name=\"email\"\n                        onChange={handleInputChange}\n                        value={userFormData.email}\n                        required\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                        Email is required!\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Label htmlFor=\"password\">Password</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        placeholder=\"Your password\"\n                        name=\"password\"\n                        onChange={handleInputChange}\n                        value={userFormData.password}\n                        required\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                        Password is required!\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Button\n                    disabled={!(userFormData.email && userFormData.password)}\n                    type=\"submit\"\n                    variant=\"success\"\n                >\n                    Submit\n                </Button>\n            </Form>\n        </>\n    );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\n import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n  import { faFrog } from '@fortawesome/free-solid-svg-icons'\n\nconst AppNavbar = () => {\n    // set modal display state\n    const [showModal, setShowModal] = useState(false);\n\n    return (\n        <>\n            <Navbar bg='secondary' variant='dark' expand='lg' fixed=\"top\" shadow=\"lg\">\n                <Container fluid>\n                    <FontAwesomeIcon icon={[\"fas\", \"coffee\"]} />\n                    <Navbar.Brand as={Link} to='/'>\n                        frogr\n                    </Navbar.Brand>\n\n                    <Navbar.Toggle aria-controls='navbar' />\n                    <Navbar.Collapse id='navbar'>\n                        <Nav className='ms-auto'>\n                            <Nav.Link as={Link} to='/'>\n                                frogr\n                            </Nav.Link>\n                            {/* if user is logged in show saved Liked Posts and logout */}\n                            {Auth.loggedIn() ? (\n                                <>\n                                    <Nav.Link as={Link} to='/saved'>\n                                        See Your Liked Posts\n                                    </Nav.Link>\n                                    <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                                </>\n                            ) : (\n                                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n                            )}\n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n            {/* set modal data up */}\n            <Modal\n                size='lg'\n                show={showModal}\n                onHide={() => setShowModal(false)}\n                aria-labelledby='signup-modal'>\n                {/* tab container to do either signup or login component */}\n                <Tab.Container defaultActiveKey='login'>\n                    <Modal.Header closeButton>\n                        <Modal.Title id='signup-modal'>\n                            <Nav variant='pills'>\n                                <Nav.Item>\n                                    <Nav.Link eventKey='login'>Login</Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                                </Nav.Item>\n                            </Nav>\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Tab.Content>\n                            <Tab.Pane eventKey='login'>\n                                <LoginForm handleModalClose={() => setShowModal(false)} />\n                            </Tab.Pane>\n                            <Tab.Pane eventKey='signup'>\n                                <SignUpForm handleModalClose={() => setShowModal(false)} />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Modal.Body>\n                </Tab.Container>\n            </Modal>\n        </>\n    );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nconst Footer = () => {\n    const location = useLocation();\n    const navigate = useNavigate();\n    return (\n        <footer className=\"w-100 mt-auto bg-secondary p-4\">\n            <div className=\"container text-center mb-5\">\n                {location.pathname !== '/' && (\n                    <button\n                        className=\"btn btn-dark mb-3\"\n                        onClick={() => navigate(-1)}\n                    >\n                        &larr; Go Back\n                    </button>\n                )}\n                <ul className=\"nav justify-content-center\">\n        <li className=\"nav-item\">\n            <a\n                className=\"nav-link active\"\n                aria-current=\"page\"\n                href=\"https://github.com/jennnmarshall\"\n                target=\"blank\"\n            ><i className=\"fa-brands fa-github\"></i>Jenn</a>\n            </li>\n            <li className=\"nav-item\">\n            <a\n                className=\"nav-link\"\n                href=\"https://github.com/cbaird21\"\n                target=\"blank\"\n            ><i className=\"fa-brands fa-github\"></i>Chandler</a>\n            </li>\n            <li className=\"nav-item\">\n            <a\n                className=\"nav-link\"\n                href=\"https://github.com/mgetz34\"\n                target=\"blank\"\n            ><i className=\"fa-brands fa-github\"></i>Michael</a>\n            </li>\n            <li className=\"nav-item\">\n            <a\n                className=\"nav-link\"\n                href=\"https://github.com/GarrettA01\"\n                target=\"blank\"\n            ><i className=\"fa-brands fa-github\"></i>Garrett</a>\n            </li>\n            <li className=\"nav-item\">\n            <a\n                className=\"nav-link\"\n                href=\"https://github.com/GarrettA01\"\n                target=\"blank\"\n            ><i className=\"fa-brands fa-github\"></i>Andy</a>\n            </li>        \n        </ul>\n            </div>\n        </footer>\n    );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Auth from '../../utils/auth';\nimport NavBar from '../NavBar';\nconst Header = () => {\n    const logout = (event) => {\n        event.preventDefault();\n        Auth.logout();\n    };\n    return (\n        <header className=\" bg-primary text-light mb-4 py-3 flex-row align-center\">\n            <NavBar />\n        </header>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { setContext } from \"@apollo/client/link/context\";\nimport Discover from './pages/Discover';\n// import SearchPosts from './pages/SearchPost';\nimport LikedPost from './pages/LikedPost';\nimport NavBar from './components/NavBar.js';\nimport Footer from './components/Footer/index';\nimport Header from './components/Header/index';\n\n// this sends graphql operations to our remote endpoint, it might be what we were missing?\nconst httpLink = createHttpLink({\n    uri: '/graphql'\n})\n\n// create link with context to use jwt and pass to apollo\nconst authLink = setContext((_, { headers }) => {\n    const token = localStorage.getItem(\"id_token\");\n    return {\n        headers: {\n            ...headers,\n            // this might solve the token problem\n            authorization: token ? `Bearer ${token}` : \"\",\n        },\n    };\n});\n\n// using the apollo client with the created http link\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache(),\n});\n\nfunction App() {\n\n    return (\n        <ApolloProvider client={client}>\n            <Router>\n                <>\n                    <Header>\n                        <NavBar />\n                    </Header>\n                    <Routes>\n                        <Route exact path='/' element={<Discover/>} />\n                        <Route exact path='/saved' element={<LikedPost/>} />\n                        <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n                    </Routes>\n                    <Footer />\n                </>\n            </Router>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    // <React.StrictMode>\n    <App />,\n    // </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}